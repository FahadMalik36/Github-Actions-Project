name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Compile code
        run: mvn compile

  security-check:
    runs-on: ubuntu-latest
    needs: compile

    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          output: 'fs-report.json'

      - name: Run Trivy filesystem scan
        run: trivy fs --security-checks vuln,config,secret --format table -o fs-report.json .

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        with:
          report-format: 'json'
          report-path: 'gitleaks-report.json'

  test:
    runs-on: ubuntu-latest
    needs: security-check

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and Test
        run: mvn clean package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar  # Uploads built JAR(s)

  build_sonar_scan:
    runs-on: ubuntu-latest
    needs: security-check

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build project for analysis
        run: mvn package

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: [test, build_sonar_scan]

    steps:
      - uses: actions/checkout@v4

      - name: Debug - Verify Dockerfile exists
        run: |
          ls -la
          cat Dockerfile

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app/  # Critical: Matches Dockerfile's COPY command

      - name: Debug - Verify JAR download
        run: ls -la app/

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: fahadmalik1/appbankapp:latest
          build-args: |
            APP_NAME=your-app-name.jar  # Optional: Pass JAR name if dynamic

  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: build_docker_image_and_push
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

        version:latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f ds.yml
